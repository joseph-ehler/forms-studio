/**
 * Field Showcase - All 22 Generated Fields
 * 
 * Interactive demo of the God Tier Factory output.
 * 
 * Run: pnpm --filter demo-app dev
 * Then: http://localhost:5173/fields
 */

import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Stack, Heading, Body, Card, AppProvider } from '@intstudio/ds';
import {
  TextField,
  EmailField,
  NumberField,
  UrlField,
  TelField,
  TextareaField,
  SelectField,
  CheckboxField,
  DateField,
  TimeField,
  DateTimeField,
  ColorField,
  FileField,
  RangeField,
  SliderField,
  RatingField,
  TagInputField,
  ToggleField,
  MultiSelectField,
  LocationField,
  RangeCompositeField,
  SignatureField,
} from '@intstudio/forms/fields';

// Validation schema
const schema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  age: z.coerce.number().min(18, 'Must be 18 or older'),
  website: z.string().url('Must be a valid URL').optional().or(z.literal('')),
  phone: z.string().optional(),
  bio: z.string().optional(),
  country: z.string().optional(),
  terms: z.boolean().refine((val) => val === true, 'You must accept the terms'),
  birthdate: z.string().optional(),
  meetingTime: z.string().optional(),
  appointment: z.string().optional(),
  favoriteColor: z.string().optional(),
  resume: z.any().optional(),
  volume: z.coerce.number().optional(),
  brightness: z.coerce.number().optional(),
  rating: z.coerce.number().optional(),
  tags: z.array(z.string()).optional(),
  notifications: z.boolean().optional(),
  interests: z.array(z.string()).optional(),
  location: z.object({ lat: z.coerce.number(), lng: z.coerce.number() }).optional(),
  priceRange: z.object({ min: z.coerce.number(), max: z.coerce.number() }).optional(),
  signature: z.string().optional(),
});

type FormData = z.infer<typeof schema>;

export function FieldShowcase() {
  const { control, handleSubmit, formState: { errors }, watch } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: {
      name: '',
      email: '',
      age: 0,
      website: '',
      phone: '',
      bio: '',
      country: '',
      terms: false,
      birthdate: '',
      meetingTime: '',
      appointment: '',
      favoriteColor: '#3b82f6',
      volume: 50,
      brightness: 75,
      rating: 0,
      tags: [],
      notifications: false,
      interests: [],
      location: { lat: 0, lng: 0 },
      priceRange: { min: 0, max: 100 },
      signature: '',
    },
  });

  const values = watch();

  const onSubmit = (data: FormData) => {
    console.log('Form submitted:', data);
    alert('Form submitted! Check console for values.');
  };

  return (
    <AppProvider theme="light">
      <div style={{ padding: '24px', maxWidth: '800px', margin: '0 auto' }}>
      <Stack spacing="relaxed">
        <div>
          <Heading level="h1">Field Showcase</Heading>
          <Body size="md" style={{ color: '#666', marginTop: '8px' }}>
            All 22 fields generated by God Tier Factory v2.2
          </Body>
        </div>

        <Card style={{ padding: '32px' }}>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Stack spacing="normal">
              
              {/* SIMPLE TEXT INPUTS */}
              <Heading level="h3">Text Inputs (7)</Heading>
              
              <TextField
                name="name"
                control={control}
                errors={errors}
                label="Name *"
                required
                description="Your full name"
              />
              
              <EmailField
                name="email"
                control={control}
                errors={errors}
                label="Email *"
                required
                description="We'll never share your email"
              />
              
              <NumberField
                name="age"
                control={control}
                errors={errors}
                label="Age *"
                required
                description="Must be 18 or older"
              />
              
              <UrlField
                name="website"
                control={control}
                errors={errors}
                label="Website"
                description="Your personal or company website"
              />
              
              <TelField
                name="phone"
                control={control}
                errors={errors}
                label="Phone"
                description="Optional contact number"
              />
              
              <TextareaField
                name="bio"
                control={control}
                errors={errors}
                label="Bio"
                description="Tell us about yourself"
              />
              
              {/* SelectField temporarily disabled - needs options prop */}
              
              {/* BOOLEAN INPUTS */}
              <Heading level="h3">Boolean Inputs (2)</Heading>
              
              <CheckboxField
                name="terms"
                control={control}
                errors={errors}
                label="I accept the terms and conditions *"
                required
              />
              
              <ToggleField
                name="notifications"
                control={control}
                errors={errors}
                label="Enable notifications"
              />
              
              {/* DATE/TIME INPUTS */}
              <Heading level="h3">Date & Time Inputs (3)</Heading>
              
              <DateField
                name="birthdate"
                control={control}
                errors={errors}
                label="Birthdate"
                description="When were you born?"
              />
              
              <TimeField
                name="meetingTime"
                control={control}
                errors={errors}
                label="Preferred Meeting Time"
              />
              
              <DateTimeField
                name="appointment"
                control={control}
                errors={errors}
                label="Appointment"
                description="Schedule a future appointment"
              />
              
              {/* SPECIAL INPUTS */}
              <Heading level="h3">Special Inputs (4)</Heading>
              
              <ColorField
                name="favoriteColor"
                control={control}
                errors={errors}
                label="Favorite Color"
                description="Pick your favorite color"
              />
              
              <FileField
                name="resume"
                control={control}
                errors={errors}
                label="Resume"
                description="Upload your resume (PDF, DOC)"
              />
              
              <TagInputField
                name="tags"
                control={control}
                errors={errors}
                label="Skills"
                description="Add your skills (comma-separated)"
              />
              
              {/* MultiSelectField temporarily disabled - needs options prop */}
              
              {/* RANGE INPUTS */}
              <Heading level="h3">Range Inputs (3)</Heading>
              
              <RangeField
                name="volume"
                control={control}
                errors={errors}
                label="Volume"
                description="Adjust volume level"
              />
              
              <SliderField
                name="brightness"
                control={control}
                errors={errors}
                label="Brightness"
                description="Adjust screen brightness"
              />
              
              <RatingField
                name="rating"
                control={control}
                errors={errors}
                label="Rating"
                description="Rate your experience"
              />
              
              {/* COMPOSITE INPUTS */}
              <Heading level="h3">Composite Inputs (3)</Heading>
              
              <LocationField
                name="location"
                control={control}
                errors={errors}
                label="Location"
                description="Enter latitude and longitude"
              />
              
              <RangeCompositeField
                name="priceRange"
                control={control}
                errors={errors}
                label="Price Range"
                description="Min and max price"
              />
              
              <SignatureField
                name="signature"
                control={control}
                errors={errors}
                label="Signature"
                description="Sign here"
              />
              
              {/* SUBMIT */}
              <div style={{ marginTop: '24px', display: 'flex', gap: '16px' }}>
                <button type="submit" style={{ padding: '10px 20px', background: '#3b82f6', color: 'white', border: 'none', borderRadius: '6px', cursor: 'pointer', fontSize: '14px', fontWeight: 500 }}>
                  Submit Form
                </button>
                <button type="button" onClick={() => console.log('Current values:', values)} style={{ padding: '10px 20px', background: '#6b7280', color: 'white', border: 'none', borderRadius: '6px', cursor: 'pointer', fontSize: '14px', fontWeight: 500 }}>
                  Log Values
                </button>
              </div>
            </Stack>
          </form>
        </Card>

        {/* LIVE VALUES */}
        <Card style={{ padding: '24px', backgroundColor: '#f9fafb' }}>
          <Heading level="h4">Live Form Values</Heading>
          <pre style={{ fontSize: '12px', overflow: 'auto', marginTop: '12px' }}>
            {JSON.stringify(values, null, 2)}
          </pre>
        </Card>
      </Stack>
      </div>
    </AppProvider>
  );
}
