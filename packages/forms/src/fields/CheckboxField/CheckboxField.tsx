/**
 * CheckboxField Component
 * 
 * Boolean checkbox field with Zod validation via react-hook-form.
 * Simple, portable contract - no DS typography complexity.
 * 
 * GENERATED by CheckboxRecipe (Phase 1 beautification)
 * Replaces incorrect .ds-input usage with .ds-checkbox
 */

import React from 'react';
import { Controller, type FieldValues } from 'react-hook-form';
import type { FieldComponentProps } from '../../form-core/types';
import { FormLabel, FormHelperText, Stack } from '@intstudio/ds';

export interface CheckboxFieldProps<T extends FieldValues = FieldValues>
  extends Omit<FieldComponentProps<T>, 'placeholder'> {
  label?: string;      // Checkbox label text
  description?: string; // Helper text
}

export function CheckboxField<T extends FieldValues = FieldValues>({
  name,
  control,
  errors,
  label,
  required,
  disabled,
  description
}: CheckboxFieldProps<T>) {
  const err = (errors as any)?.[name];
  const hasError = Boolean(err);
  const errorMessage = err?.message as string | undefined;

  return (
    <Stack spacing="tight">
      <Controller
        name={name as any}
        control={control as any}
        render={({ field }) => (
          <label
            htmlFor={name}
            style={{ 
              display: 'flex', 
              alignItems: 'center', 
              gap: '0.5rem', 
              cursor: disabled ? 'not-allowed' : 'pointer' 
            }}
          >
            <input
              type="checkbox"
              id={name}
              className="ds-checkbox"
              disabled={disabled}
              aria-invalid={hasError || undefined}
              aria-describedby={description ? `${name}-desc` : undefined}
              aria-required={required || undefined}
              checked={field.value ?? false}
              onChange={(e) => field.onChange(e.target.checked)}
              onBlur={field.onBlur}
            />
            {label && (
              <span style={{ userSelect: 'none' }}>
                {label}
                {required && (
                  <span style={{ 
                    color: 'var(--ds-color-state-danger)', 
                    marginLeft: '0.25rem' 
                  }}>
                    *
                  </span>
                )}
              </span>
            )}
          </label>
        )}
      />

      {description && (
        <div id={`${name}-desc`}>
          <FormHelperText size="sm" aria-live="polite">
            {description}
          </FormHelperText>
        </div>
      )}

      {hasError && errorMessage && (
        <FormHelperText variant="error" size="sm" aria-live="polite">
          {errorMessage}
        </FormHelperText>
      )}
    </Stack>
  );
}
