/**
 * Checkbox Primitive
 * 
 * Semantic, accessible checkbox styling.
 * Replaces incorrect .ds-input usage on checkbox fields.
 * 
 * @layer atoms
 * @since 2025-10-23
 */

@layer atoms {
  
  /* Base checkbox */
  .ds-checkbox {
    /* Size */
    inline-size: 1.125rem;  /* 18px - compact, clear */
    block-size: 1.125rem;
    
    /* Border & Background */
    border: 2px solid var(--color-border, #CBD5E1);
    border-radius: 0.25rem;  /* 4px - subtle rounding */
    background: var(--color-surface, #FFFFFF);
    
    /* Layout */
    display: inline-block;
    box-sizing: border-box;
    vertical-align: middle;
    position: relative;
    
    /* Reset native appearance */
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    
    /* Interaction */
    cursor: pointer;
    transition: 
      border-color 150ms ease,
      background-color 150ms ease,
      box-shadow 150ms ease;
  }
  
  /* Hover state */
  .ds-checkbox:hover:not(:disabled) {
    border-color: var(--color-border-hover, #94A3B8);
  }
  
  /* Focus state (keyboard navigation) */
  .ds-checkbox:focus-visible {
    outline: none;
    box-shadow: 
      0 0 0 3px var(--focus-ring, rgba(59, 130, 246, 0.4)),
      0 0 0 1px var(--color-border, #CBD5E1);
  }
  
  /* Checked state */
  .ds-checkbox:checked {
    background: var(--color-primary, #3B82F6);
    border-color: var(--color-primary, #3B82F6);
  }
  
  /* Checkmark (simple CSS approach) */
  .ds-checkbox:checked::after {
    content: "";
    position: absolute;
    
    /* Positioning for checkmark tick */
    inset-inline-start: 4px;
    inset-block-start: 2px;
    inline-size: 4px;
    block-size: 8px;
    
    /* Draw checkmark */
    border-inline-end: 2px solid var(--color-ink-inverse, #FFFFFF);
    border-block-end: 2px solid var(--color-ink-inverse, #FFFFFF);
    
    /* Rotate to create tick */
    transform: rotate(45deg);
  }
  
  /* Disabled state */
  .ds-checkbox:disabled {
    cursor: not-allowed;
    opacity: 0.5;
    background: var(--color-surface-disabled, #F1F5F9);
    border-color: var(--color-border-disabled, #E2E8F0);
  }
  
  /* Invalid state (error) */
  .ds-checkbox[aria-invalid="true"] {
    border-color: var(--color-error, #B91C1C);
  }
  
  .ds-checkbox[aria-invalid="true"]:focus-visible {
    box-shadow: 
      0 0 0 3px var(--error-ring, rgba(185, 28, 28, 0.3)),
      0 0 0 1px var(--color-error, #B91C1C);
  }
  
  /* Indeterminate state (optional - for "select all" scenarios) */
  .ds-checkbox:indeterminate {
    background: var(--color-primary, #3B82F6);
    border-color: var(--color-primary, #3B82F6);
  }
  
  .ds-checkbox:indeterminate::after {
    content: "";
    position: absolute;
    inset: 6px;
    background: var(--color-ink-inverse, #FFFFFF);
    border: none;
    transform: none;
  }

} /* End @layer atoms */

/* 
 * USAGE EXAMPLE:
 * 
 * <input 
 *   type="checkbox" 
 *   className="ds-checkbox"
 *   aria-invalid={hasError}
 *   aria-describedby="help-text-id"
 * />
 * 
 * TOKENS TO ADJUST (if your DS uses different names):
 * - --color-border → Your border token
 * - --color-surface → Your background token
 * - --color-primary → Your brand color
 * - --color-ink-inverse → White text on primary
 * - --focus-ring → Your focus ring color
 * - --color-error → Your error/danger color
 */
