/**
 * Button - Automagic, production-unbreakable interaction layer
 * 
 * CRITICAL: This CSS only reads --btn-* skin variables set by the component.
 * Never reference --ds-role-* directly → that would break the abstraction.
 * 
 * How it works:
 * 1. Component sets --btn-fg, --btn-bg, --btn-hover-bg, --btn-active-bg
 * 2. CSS applies those to base, :hover, :active states
 * 3. Result: Change a role in tokens.css → all buttons update automatically
 * 
 * Patterns:
 * - Skin variables (--btn-*) → single source of truth
 * - Safe fallbacks (var(--btn-hover-bg, var(--btn-bg)))
 * - Media queries (hover:hover, prefers-reduced-motion)
 * - High-contrast mode support
 */

/* ============================================
   BASE STYLES
   ============================================ */

[data-component="button"] {
  /* Layout */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--ds-space-2);
  
  /* Sizing */
  min-block-size: var(--ds-touch-target);
  padding-inline: var(--ds-space-control-x);
  padding-block: var(--ds-space-control-y);
  
  /* Typography */
  font-family: var(--ds-font-sans);
  font-weight: var(--ds-weight-medium);
  line-height: var(--ds-leading-tight);
  text-align: center;
  white-space: nowrap;
  
  /* Borders & radius */
  border-radius: var(--ds-radius-control);
  border-width: 1px;
  border-style: solid;
  
  /* Transitions (smooth but fast) */
  transition: 
    background-color var(--ds-transition-fast),
    box-shadow var(--ds-transition-fast),
    transform var(--ds-transition-fast);
  
  /* Interaction */
  cursor: pointer;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  
  /* Focus */
  outline: none;
  
  /* SKIN VARIABLES (set by component, consumed here) */
  color: var(--btn-fg);
  background: var(--btn-bg);
  border-color: var(--btn-border, transparent);
}

/* ============================================
   HOVER STATE (pointer devices only)
   ============================================ */

@media (hover: hover) and (pointer: fine) {
  [data-component="button"]:hover:not(:disabled) {
    background: var(--btn-hover-bg, var(--btn-bg)); /* Safe fallback */
    box-shadow: var(--ds-shadow-overlay-sm);
    transform: translateY(-1px);
  }
}

/* ============================================
   ACTIVE STATE
   ============================================ */

[data-component="button"]:active:not(:disabled) {
  background: var(--btn-active-bg, var(--btn-hover-bg, var(--btn-bg))); /* Multi-level fallback */
  transform: translateY(0);
  box-shadow: none;
}

/* ============================================
   FOCUS STATE (variant-agnostic)
   ============================================ */

[data-component="button"]:focus-visible {
  box-shadow:
    0 0 0 var(--ds-focus-offset) var(--ds-role-bg),
    0 0 0 calc(var(--ds-focus-offset) + var(--ds-focus-ring)) var(--ds-state-focus-ring);
}

/* ============================================
   VARIANT-SPECIFIC OVERRIDES (minimal)
   ============================================ */

/* Secondary needs visible border on hover */
@media (hover: hover) and (pointer: fine) {
  [data-component="button"][data-variant="secondary"]:hover:not(:disabled) {
    border-color: var(--ds-role-border);
  }
}

/* Ghost has no border ever */
[data-component="button"][data-variant="ghost"] {
  border-color: transparent;
}

/* NOTE: All color/background logic now handled by skin variables above.
   Adding a new variant? Just update the SKIN map in Button.tsx.
   No CSS changes required. */

/* ============================================
   SIZES (bound to density tokens)
   ============================================ */

[data-component="button"][data-size="sm"] {
  padding-inline: 0.625rem;  /* 10px */
  padding-block: 0.375rem;   /* 6px */
  font-size: var(--ds-text-sm);
  min-block-size: 36px;
}

[data-component="button"][data-size="md"] {
  padding-inline: 0.75rem;   /* 12px */
  padding-block: 0.5rem;     /* 8px */
  font-size: var(--ds-text-sm);
}

[data-component="button"][data-size="lg"] {
  padding-inline: 0.875rem;  /* 14px */
  padding-block: 0.625rem;   /* 10px */
  font-size: var(--ds-text-base);
  min-block-size: 48px;
}

/* ============================================
   DISABLED STATE
   ============================================ */

[data-component="button"]:disabled,
[data-component="button"][aria-disabled="true"] {
  opacity: var(--ds-disabled-opacity, 0.5);
  cursor: not-allowed;
  box-shadow: none;
  transform: none;
  pointer-events: none;
}

/* ============================================
   LOADING STATE
   ============================================ */

[data-component="button"][aria-busy="true"] {
  cursor: wait;
  position: relative;
}

/* Loading spinner */
[data-component="button"] .button-spinner {
  display: inline-block;
  width: 1em;
  height: 1em;
  border: 2px solid currentColor;
  border-right-color: transparent;
  border-radius: 50%;
  animation: button-spin var(--ds-transition-slow) linear infinite;
}

@keyframes button-spin {
  to {
    transform: rotate(360deg);
  }
}

/* ============================================
   ICON SLOTS
   ============================================ */

[data-component="button"] .button-icon {
  display: inline-flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: center;
}

[data-component="button"] .button-content {
  display: inline-flex;
  align-items: center;
  gap: var(--ds-space-2);
}

/* ============================================
   REDUCED MOTION
   ============================================ */

@media (prefers-reduced-motion: reduce) {
  [data-component="button"] {
    transition: none;
    transform: none !important;
  }
  
  [data-component="button"] .button-spinner {
    animation: none;
    border-right-color: currentColor;
  }
}

/* ============================================
   HIGH CONTRAST MODE
   ============================================ */

:root[data-contrast="high"] [data-component="button"] {
  border-width: 2px;
}

:root[data-contrast="high"] [data-component="button"]:focus-visible {
  outline: var(--ds-outline-width) solid currentColor;
  outline-offset: var(--ds-outline-offset);
}
