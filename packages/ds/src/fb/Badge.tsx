/**
 * Badge - Production-grade SKIN-driven Flowbite wrapper
 * 
 * Generated by: pnpm ds:new Badge
 * Pattern: Wrap Flowbite component + apply SKIN variables
 * 
 * Features:
 * - 5 variants (default, success, warning, danger, info)
 * - Wraps Flowbite Badge (battle-tested foundation)
 * - SKIN-driven styling (design tokens only)
 * - A11y: Inherits from Flowbite
 * - Diagnostics: data-* attributes for debugging
 */

import './Badge.css';

import { Badge as FlowbiteBadge } from 'flowbite-react';
import { ComponentProps } from 'react';
import { twMerge } from 'tailwind-merge';

import { BadgeVariant as BadgeVariantType } from '../control/variants.config';
import { BADGE_SKIN } from '../registry/skins/badge.skin';

// Re-export for backward compatibility
export type { BadgeVariantType as BadgeVariant };

/**
 * SKIN imported from registry - single source of truth
 * Local component consumes; never defines
 */
const SKIN = BADGE_SKIN;

export type BadgeProps = ComponentProps<typeof FlowbiteBadge> & {
  /**
   * Semantic variant (DS layer)
   * @default 'default'
   */
  variant?: BadgeVariantType;
};

/**
 * Badge - Flowbite wrapper with SKIN
 * 
 * Wraps Flowbite's Badge component and applies SKIN variables.
 * All Flowbite props pass through; SKIN adds semantic variants.
 * 
 * @example
 * ```tsx
 * <Badge variant="default">
 *   Content
 * </Badge>
 * ```
 */
export function Badge({
  variant = 'default',
  className,
  style,
  ...rest
}: BadgeProps) {
  // Get skin variables for this variant
  const skin = SKIN[variant];
  
  return (
    <FlowbiteBadge
      data-component="badge"
      data-variant={variant}
      className={twMerge(className)}
      style={{ ...skin, ...style } as any}
      {...rest as any}
    />
  );
}

// Component-specific variant exported above as BadgeVariant
