/**
 * Textarea - Production-grade SKIN-driven Flowbite wrapper
 * 
 * Generated by: pnpm ds:new Textarea
 * Pattern: Wrap Flowbite component + apply SKIN variables
 * 
 * Features:
 * - 5 variants (default, success, warning, danger, info)
 * - Wraps Flowbite Textarea (battle-tested foundation)
 * - SKIN-driven styling (design tokens only)
 * - A11y: Inherits from Flowbite
 * - Diagnostics: data-* attributes for debugging
 */

import './Textarea.css';

import { Textarea as FlowbiteTextarea } from 'flowbite-react';
import { ComponentProps } from 'react';
import { twMerge } from 'tailwind-merge';

import { TextareaVariant as TextareaVariantType } from '../control/variants.config';
import { TEXTAREA_SKIN } from '../registry/skins/textarea.skin';

// Re-export for backward compatibility
export type { TextareaVariantType as TextareaVariant };

/**
 * SKIN imported from registry - single source of truth
 * Local component consumes; never defines
 */
const SKIN = TEXTAREA_SKIN;

export type TextareaProps = ComponentProps<typeof FlowbiteTextarea> & {
  /**
   * Semantic variant (DS layer)
   * @default 'default'
   */
  variant?: TextareaVariantType;
};

/**
 * Textarea - Flowbite wrapper with SKIN
 * 
 * Wraps Flowbite's Textarea component and applies SKIN variables.
 * All Flowbite props pass through; SKIN adds semantic variants.
 * 
 * @example
 * ```tsx
 * <Textarea variant="default">
 *   Content
 * </Textarea>
 * ```
 */
export function Textarea({
  variant = 'default',
  className,
  style,
  ...rest
}: TextareaProps) {
  // Get skin variables for this variant
  const skin = SKIN[variant];
  
  return (
    <FlowbiteTextarea
      data-component="textarea"
      data-variant={variant}
      className={twMerge(className)}
      style={{ ...skin, ...style } as any}
      {...rest as any}
    />
  );
}

// Component-specific variant exported above as TextareaVariant
