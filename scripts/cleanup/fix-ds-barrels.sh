#!/bin/bash
# Fix broken DS barrel exports
# Files with hyphens need export * syntax

set -e

cd packages/ds/src

# Fix a11y barrel
cat > a11y/index.ts << 'EOF'
/**
 * AUTO-GENERATED by barrelize.mjs
 * Do not edit manually - run `pnpm barrels` to regenerate
 */

export * from './a11y-validator';
export * from './a11yProfiles';
export { applyA11y } from './applyA11y';
export * from './input-modality';
export * from './sr-announce';
EOF

# Fix utils barrel
cat > utils/index.ts << 'EOF'
/**
 * AUTO-GENERATED by barrelize.mjs
 * Do not edit manually - run `pnpm barrels` to regenerate
 */

export * from './debug-typography';
export * from './densityAdapter';
export * from './layoutConfig';
export * from './rtl';
export * from './semanticSizing';
export { useMotion } from './useMotion';
EOF

# Fix white-label barrel
cat > white-label/index.ts << 'EOF'
/**
 * AUTO-GENERATED by barrelize.mjs
 * Do not edit manually - run `pnpm barrels` to regenerate
 */

export { ContrastBadge } from './ContrastBadge';
export * from './contrastValidator';
export * from './toneResolver';
export { useContrastGuard } from './useContrastGuard';
EOF

# Fix shell barrel
cat > shell/index.ts << 'EOF'
/**
 * AUTO-GENERATED by barrelize.mjs
 * Do not edit manually - run `pnpm barrels` to regenerate
 */

export { AppProvider, useApp } from './AppContext';
export { AppShell } from './AppShell';
export { BottomNav } from './BottomNav';
export { Drawer } from './Drawer';
export { PullToRefresh } from './PullToRefresh';
export { Sheet } from './Sheet';
export { TopBar } from './TopBar';
EOF

# Fix HelperText (remove non-existent imports)
cat > primitives/HelperText.tsx << 'EOF'
/**
 * FormHelperText Component (Standalone)
 * 
 * Simple helper text with variants for different states.
 */

import React from 'react'
import '../styles/components/ds-typography.css'

interface FormHelperTextProps {
  variant?: 'default' | 'error' | 'success' | 'warning'
  children: React.ReactNode
  className?: string
}

export const HelperText: React.FC<FormHelperTextProps> = ({
  variant = 'default',
  children,
  className = '',
}) => {
  const variantClass = variant === 'default' ? 'ds-helper--hint' : `ds-helper--${variant}`;
  
  return (
    <span className={`ds-helper ds-helper--sm ${variantClass} ${className}`}>
      {children}
    </span>
  )
}
EOF

# Fix Label (remove non-existent imports)
cat > primitives/Label.tsx << 'EOF'
/**
 * FormLabel Component (Standalone)
 * 
 * Simple form label component.
 */

import React from 'react'
import '../styles/components/ds-typography.css'

interface FormLabelProps {
  htmlFor?: string
  children: React.ReactNode
  className?: string
  required?: boolean
}

export const Label: React.FC<FormLabelProps> = ({
  htmlFor,
  children,
  className = '',
  required = false,
}) => {
  return (
    <label htmlFor={htmlFor} className={`ds-label ${className}`}>
      {children}
      {required && <span className="ds-label__req" aria-label="required">*</span>}
    </label>
  )
}
EOF

echo "âœ… All barrels fixed!"
