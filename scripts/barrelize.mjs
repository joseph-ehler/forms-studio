#!/usr/bin/env node
/**
 * Barrelizer - Deterministic Barrel Generation
 * 
 * Generates each outfile in repo.imports.yaml.barrels
 * - Stable alphabetic order
 * - Respects include/exclude
 * - Strips extensions
 * - Exports components only (not internal helpers)
 */

import fs from 'node:fs';
import path from 'node:path';
import yaml from 'js-yaml';
import { globSync } from 'glob';

const ROOT = process.cwd();
const cfg = yaml.load(fs.readFileSync(path.join(ROOT, 'repo.imports.yaml'), 'utf8'));
const entries = cfg.barrels || [];

function toExportName(file) {
  const base = path.basename(file).replace(/\.(tsx?|jsx?)$/, '');
  // Skip index files
  if (base.toLowerCase() === 'index') return null;
  // Keep PascalCase files only (components)
  return base;
}

function generateBarrelContent(files, outfile) {
  const lines = [
    '/**',
    ' * AUTO-GENERATED by barrelize.mjs',
    ' * Do not edit manually - run `pnpm barrels` to regenerate',
    ' */',
    '',
  ];

  for (const f of files) {
    const name = toExportName(f);
    if (!name) continue;
    
    const rel = './' + path.relative(path.dirname(outfile), f)
      .replace(/\\/g, '/')
      .replace(/\.(tsx?|jsx?)$/, '');
    
    lines.push(`export { ${name} } from '${rel}';`);
  }

  return lines.join('\n') + '\n';
}

console.log('ðŸ”¨ Barrelizing...\n');

for (const b of entries) {
  const patterns = b.include.map(p => path.join(b.folder, p));
  const files = globSync(patterns, { 
    ignore: b.exclude || [],
    nodir: true,
  })
    .filter(f => !/\.d\.ts$/.test(f))
    .sort((a, b) => a.localeCompare(b));

  const content = generateBarrelContent(files, b.outfile);
  
  fs.mkdirSync(path.dirname(b.outfile), { recursive: true });
  fs.writeFileSync(b.outfile, content);
  
  console.log(`âœ… ${b.outfile.replace(ROOT + '/', '')}`);
  console.log(`   (${files.length} exports)\n`);
}

console.log('ðŸŽ‰ Barrelization complete!');
